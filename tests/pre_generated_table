// Generated by HaRm
/**
 * This file is generated. Do not modify it manually!
 *
 * @generated SignedSource<<a5e48510cd3f1cf10dd63bb36e089315>>
 */
namespace Test\ORM;
use namespace HH\Lib\{C, Str, Vec};

final class Sample
	implements
		SampleInterface {

	const TABLE_NAME = 'sample';
	const SEQUENCE_NAME = 'sample_id_seq';

	private int $id = 0;
	private bool $data_loaded = false;
	private bool $modified = false;
	private dict<string, bool> $dirty;
	private int $integer_field = 0;
	private int $int2_field = 0;
	private float $float_field = 0.0;
	private string $text_field = '';
	private int $date_field = 0;
	private string $remote_addr_field = '';
	private bool $bool_field = false;

	public function __construct(private \PDO $database): void {
		$this->startDirtyTagging();
	}

	public function isNew(): bool {
		return $this->data_loaded !== true;
	}

	public function loadDataByDatabaseResult(array<string, ?string> $data): void {
		$this->data_loaded = true;
		$this->modified = false;
		$this->id = (int) $data['id'];
		$this->setIntegerField((int) $data['integer_field']);
		$this->setInt2Field((int) $data['int2_field']);
		$this->setFloatField((float) $data['float_field']);
		$this->setTextField((string) $data['text_field']);
		$this->setDateField((int) \strtotime((string)$data['date_field']));
		$this->setRemoteAddrField((string) $data['remote_addr_field']);
		$this->setBoolField((bool) $data['bool_field']);

		$this->startDirtyTagging();
	}

	public function save(): void {
		if ($this->isNew()) {
			$this->insert();
		} else {
			$this->update();
		}
	}

	public function getTableName(): string {
		return 'sample';
	}

	public function getIntegerField(): int {
		return $this->integer_field;
	}

	public function setIntegerField(int $value): void {
		$this->tagDirty('integer_field');
		$this->integer_field = $value;
	}

	public function getInt2Field(): int {
		return $this->int2_field;
	}

	public function setInt2Field(int $value): void {
		$this->tagDirty('int2_field');
		$this->int2_field = $value;
	}

	public function getFloatField(): float {
		return $this->float_field;
	}

	public function setFloatField(float $value): void {
		$this->tagDirty('float_field');
		$this->float_field = $value;
	}

	public function getTextField(): string {
		return $this->text_field;
	}

	public function setTextField(string $value): void {
		$this->tagDirty('text_field');
		$this->text_field = $value;
	}

	public function getDateField(): int {
		return $this->date_field;
	}

	public function setDateField(int $value): void {
		$this->tagDirty('date_field');
		$this->date_field = $value;
	}

	public function getRemoteAddrField(): string {
		return $this->remote_addr_field;
	}

	public function setRemoteAddrField(string $value): void {
		$this->tagDirty('remote_addr_field');
		$this->remote_addr_field = $value;
	}

	public function getBoolField(): bool {
		return $this->bool_field;
	}

	public function setBoolField(bool $value): void {
		$this->tagDirty('bool_field');
		$this->bool_field = $value;
	}

	public function delete(): void {
		$this->database->query('DELETE FROM sample WHERE id = '.$this->getId());
	}

	public function count(?string $condition = null): int {
		$con = '';
		if ($condition !== null) {
			$con = Str\format('WHERE %s', $condition);
		}
		return (int)$this->database->query(Str\format('SELECT COUNT(id) as count FROM %s %s', $this->getTableName(), $con))->fetchColumn();
	}

	public function exists(?string $condition = null): bool {
		$con = '';
		if ($condition !== null) {
			$con = Str\format('WHERE %s', $condition);
		}
		return ((int)$this->database->query(Str\format('SELECT 1 FROM %s %s', $this->getTableName(), $con))->fetchColumn()) > 0;
	}

	public function findObject(?string $condition = null): SampleInterface {
		$objects = $this->getObjectsBy($condition, null, 'LIMIT 1');
		if (C\count($objects) === 0) {
			throw new \Usox\HaRm\Exception\ObjectNotFoundException();
		}
		return C\firstx($objects);
	}

	public function quote(string $subject): string {
		return $this->database->quote($subject);
	}

	public function getObjectsBy(
		?string $condition = null,
		?string $order = null,
		?string $addendum = null,
	): vec<SampleInterface> {
		$query = 'SELECT id,integer_field,int2_field,float_field,text_field,date_field,remote_addr_field,bool_field FROM sample';
		if ($condition !== null) { $query .= ' WHERE '.$condition; }
		if ($order !== null) { $query .= ' ORDER BY '.$order; }
		if ($addendum !== null) { $query .= ' '.$addendum; }
		$query_result = $this->database->query($query);
		$results = vec[];
		while ($result = $query_result->fetch(\PDO::FETCH_ASSOC)) {
			$obj = new self($this->database);
			$obj->loadDataByDatabaseResult($result);
			$results[] = $obj;
		}
		return $results;
	}

	public function getById(int $id): ?SampleInterface {
		$query = 'SELECT id,integer_field,int2_field,float_field,text_field,date_field,remote_addr_field,bool_field FROM sample WHERE id = '.$id;
		$object = new self($this->database);
		$data = $this->database->query($query)->fetch(\PDO::FETCH_ASSOC);
		if ($data === false) {
			return null;
		}
		$object->loadDataByDatabaseResult($data);
		return $object;
	}

	public function emptyTable(): void {
		$this->database->query(Str\format('TRUNCATE TABLE %s', static::TABLE_NAME));
	}

	private function getDirtyForWrite(): dict<string, string> {
		$attributes = dict[];
		if ($this->isDirty('integer_field')) {
			$attributes['integer_field'] = $this->integer_field === null ? 'null' : (string) $this->integer_field;
		}
		if ($this->isDirty('int2_field')) {
			$attributes['int2_field'] = $this->int2_field === null ? 'null' : (string) $this->int2_field;
		}
		if ($this->isDirty('float_field')) {
			$attributes['float_field'] = $this->float_field === null ? 'null' : (string) $this->float_field;
		}
		if ($this->isDirty('text_field')) {
			$attributes['text_field'] = $this->text_field === null ? 'null' : $this->database->quote($this->text_field);
		}
		if ($this->isDirty('date_field')) {
			$attributes['date_field'] = $this->date_field === null ? 'null' : $this->database->quote((string) \date(\DATE_ATOM, $this->date_field));
		}
		if ($this->isDirty('remote_addr_field')) {
			$attributes['remote_addr_field'] = $this->remote_addr_field === null ? 'null' : $this->database->quote($this->remote_addr_field);
		}
		if ($this->isDirty('bool_field')) {
			$attributes['bool_field'] = $this->bool_field === null ? 'null' : ($this->bool_field === true ? 'true' : 'false');
		}

		return $attributes;
	}

	private function update(): void {
		if (!$this->modified) {
			return;
		}
		$attribute_cast_list = vec[];
		foreach ($this->getDirtyForWrite() as $field => $value) {
			$attribute_cast_list[] = $field.' = '.(string) $value;
		}
		if (C\count($attribute_cast_list) === 0) {
			return;
		}
		$this->database->query('UPDATE sample SET '.Str\join($attribute_cast_list, ', ').' WHERE id = '.$this->getId());
	}

	private function insert(): void {
		$dirty_for_write = $this->getDirtyForWrite();
		$this->database->query('INSERT INTO sample ('.Str\join(Vec\keys($dirty_for_write), ', ').') VALUES ('.Str\join($dirty_for_write, ', ').')');
		$this->id = (int) $this->database->lastInsertId(static::SEQUENCE_NAME);
		$this->data_loaded = true;
		$this->startDirtyTagging();
	}

	private function startDirtyTagging(): void {
		$this->dirty = dict['integer_field' => false,'int2_field' => false,'float_field' => false,'text_field' => false,'date_field' => false,'remote_addr_field' => false,'bool_field' => false,];
	}

	private function tagDirty(string $attribute): void {
		$this->dirty[$attribute] = true;
		$this->modified = true;
	}

	private function isDirty(string $attribute): bool {
		return $this->dirty[$attribute] === true;
	}

	public function getId(): int {
		return $this->id;
	}
}
